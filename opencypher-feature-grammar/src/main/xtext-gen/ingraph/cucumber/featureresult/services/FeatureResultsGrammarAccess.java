/*
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FeatureResultsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPathParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFloatingPointParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMyStringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBoolParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNullValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cListParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMapParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *
		// * value : node
		// *  | relationship
		// *  | path
		// *  | integer
		// *  | floatingPoint
		// *  | string
		// *  | bool
		// *  | nullValue
		// *  | list
		// *  | map
		// *  ;
		// * / Value:
		//	Node
		//	| Relationship
		//	| Path
		//	| Integer
		//	| FloatingPoint
		//	| MyString
		//	| Bool
		//	| NullValue
		//	| List
		//	| Map;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Relationship | Path | Integer | FloatingPoint | MyString | Bool | NullValue | List | Map
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_2() { return cPathParserRuleCall_2; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_3() { return cIntegerParserRuleCall_3; }
		
		//FloatingPoint
		public RuleCall getFloatingPointParserRuleCall_4() { return cFloatingPointParserRuleCall_4; }
		
		//MyString
		public RuleCall getMyStringParserRuleCall_5() { return cMyStringParserRuleCall_5; }
		
		//Bool
		public RuleCall getBoolParserRuleCall_6() { return cBoolParserRuleCall_6; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_7() { return cNullValueParserRuleCall_7; }
		
		//List
		public RuleCall getListParserRuleCall_8() { return cListParserRuleCall_8; }
		
		//Map
		public RuleCall getMapParserRuleCall_9() { return cMapParserRuleCall_9; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Node");
		private final RuleCall cNodeDescParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * node : nodeDesc ;
		// * / Node:
		//	NodeDesc;
		@Override public ParserRule getRule() { return rule; }
		
		//NodeDesc
		public RuleCall getNodeDescParserRuleCall() { return cNodeDescParserRuleCall; }
	}
	public class NodeDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.NodeDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeDescAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelsLabelParserRuleCall_2_0 = (RuleCall)cLabelsAssignment_2.eContents().get(0);
		private final Assignment cPropertyMapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyMapPropertyMapParserRuleCall_3_0 = (RuleCall)cPropertyMapAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * nodeDesc : '(' (label)* WS? (propertyMap)? ')' ;
		// * / NodeDesc:
		//	{NodeDesc} '(' labels+=Label* propertyMap=PropertyMap? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeDesc} '(' labels+=Label* propertyMap=PropertyMap? ')'
		public Group getGroup() { return cGroup; }
		
		//{NodeDesc}
		public Action getNodeDescAction_0() { return cNodeDescAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//labels+=Label*
		public Assignment getLabelsAssignment_2() { return cLabelsAssignment_2; }
		
		//Label
		public RuleCall getLabelsLabelParserRuleCall_2_0() { return cLabelsLabelParserRuleCall_2_0; }
		
		//propertyMap=PropertyMap?
		public Assignment getPropertyMapAssignment_3() { return cPropertyMapAssignment_3; }
		
		//PropertyMap
		public RuleCall getPropertyMapPropertyMapParserRuleCall_3_0() { return cPropertyMapPropertyMapParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Relationship");
		private final RuleCall cRelationshipDescParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * relationship : relationshipDesc ;
		// * / Relationship:
		//	RelationshipDesc;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationshipDesc
		public RuleCall getRelationshipDescParserRuleCall() { return cRelationshipDescParserRuleCall; }
	}
	public class RelationshipDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.RelationshipDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipDescAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeRelationshipTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cPropertyMapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertyMapPropertyMapParserRuleCall_3_0 = (RuleCall)cPropertyMapAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * relationshipDesc : '[' relationshipType (WS propertyMap)* ']' ;
		// * / RelationshipDesc:
		//	{RelationshipDesc} '[' type=RelationshipType propertyMap=PropertyMap? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipDesc} '[' type=RelationshipType propertyMap=PropertyMap? ']'
		public Group getGroup() { return cGroup; }
		
		//{RelationshipDesc}
		public Action getRelationshipDescAction_0() { return cRelationshipDescAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//type=RelationshipType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//RelationshipType
		public RuleCall getTypeRelationshipTypeParserRuleCall_2_0() { return cTypeRelationshipTypeParserRuleCall_2_0; }
		
		//propertyMap=PropertyMap?
		public Assignment getPropertyMapAssignment_3() { return cPropertyMapAssignment_3; }
		
		//PropertyMap
		public RuleCall getPropertyMapPropertyMapParserRuleCall_3_0() { return cPropertyMapPropertyMapParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathBodyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * path : '<' pathBody '>' ;
		// * / Path:
		//	'<' PathBody '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' PathBody '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//PathBody
		public RuleCall getPathBodyParserRuleCall_1() { return cPathBodyParserRuleCall_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class PathBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.PathBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeNodeDescParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Assignment cPathLinksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathLinksPathLinkParserRuleCall_1_0 = (RuleCall)cPathLinksAssignment_1.eContents().get(0);
		
		/// *
		// * pathBody : nodeDesc (pathLink)* ;
		// * / PathBody:
		//	node=NodeDesc pathLinks+=PathLink*;
		@Override public ParserRule getRule() { return rule; }
		
		//node=NodeDesc pathLinks+=PathLink*
		public Group getGroup() { return cGroup; }
		
		//node=NodeDesc
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//NodeDesc
		public RuleCall getNodeNodeDescParserRuleCall_0_0() { return cNodeNodeDescParserRuleCall_0_0; }
		
		//pathLinks+=PathLink*
		public Assignment getPathLinksAssignment_1() { return cPathLinksAssignment_1; }
		
		//PathLink
		public RuleCall getPathLinksPathLinkParserRuleCall_1_0() { return cPathLinksPathLinkParserRuleCall_1_0; }
	}
	public class PathLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.PathLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRelationshipAlternatives_1_0 = (Alternatives)cRelationshipAssignment_1.eContents().get(0);
		private final RuleCall cRelationshipForwardsRelationshipParserRuleCall_1_0_0 = (RuleCall)cRelationshipAlternatives_1_0.eContents().get(0);
		private final RuleCall cRelationshipBackwardsRelationshipParserRuleCall_1_0_1 = (RuleCall)cRelationshipAlternatives_1_0.eContents().get(1);
		private final Assignment cNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeNodeDescParserRuleCall_2_0 = (RuleCall)cNodeAssignment_2.eContents().get(0);
		
		/// *
		// * pathLink : (forwardsRelationship | backwardsRelationship) nodeDesc ;
		// * / PathLink:
		//	{PathLink} relationship=(ForwardsRelationship | BackwardsRelationship) node=NodeDesc;
		@Override public ParserRule getRule() { return rule; }
		
		//{PathLink} relationship=(ForwardsRelationship | BackwardsRelationship) node=NodeDesc
		public Group getGroup() { return cGroup; }
		
		//{PathLink}
		public Action getPathLinkAction_0() { return cPathLinkAction_0; }
		
		//relationship=(ForwardsRelationship | BackwardsRelationship)
		public Assignment getRelationshipAssignment_1() { return cRelationshipAssignment_1; }
		
		//(ForwardsRelationship | BackwardsRelationship)
		public Alternatives getRelationshipAlternatives_1_0() { return cRelationshipAlternatives_1_0; }
		
		//ForwardsRelationship
		public RuleCall getRelationshipForwardsRelationshipParserRuleCall_1_0_0() { return cRelationshipForwardsRelationshipParserRuleCall_1_0_0; }
		
		//BackwardsRelationship
		public RuleCall getRelationshipBackwardsRelationshipParserRuleCall_1_0_1() { return cRelationshipBackwardsRelationshipParserRuleCall_1_0_1; }
		
		//node=NodeDesc
		public Assignment getNodeAssignment_2() { return cNodeAssignment_2; }
		
		//NodeDesc
		public RuleCall getNodeNodeDescParserRuleCall_2_0() { return cNodeNodeDescParserRuleCall_2_0; }
	}
	public class ForwardsRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.ForwardsRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationshipDescParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * forwardsRelationship : '-' relationshipDesc '->' ;
		// * / ForwardsRelationship:
		//	'-' RelationshipDesc '->';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' RelationshipDesc '->'
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//RelationshipDesc
		public RuleCall getRelationshipDescParserRuleCall_1() { return cRelationshipDescParserRuleCall_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
	}
	public class BackwardsRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.BackwardsRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationshipDescParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *
		// * backwardsRelationship : '<-' relationshipDesc '-' ;
		// * / BackwardsRelationship:
		//	'<-' RelationshipDesc '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'<-' RelationshipDesc '-'
		public Group getGroup() { return cGroup; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//RelationshipDesc
		public RuleCall getRelationshipDescParserRuleCall_1() { return cRelationshipDescParserRuleCall_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *
		// * integer : INTEGER_LITERAL ;
		// * / Integer:
		//	{Integer} INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer} INT
		public Group getGroup() { return cGroup; }
		
		//{Integer}
		public Action getIntegerAction_0() { return cIntegerAction_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FloatingPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.FloatingPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatingPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINFINITYTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//FloatingPoint:
		//	{FloatingPoint} (INT // TODO
		//	| INFINITY);
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatingPoint} (INT // TODO
		//| INFINITY)
		public Group getGroup() { return cGroup; }
		
		//{FloatingPoint}
		public Action getFloatingPointAction_0() { return cFloatingPointAction_0; }
		
		//(INT // TODO
		//| INFINITY)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//INFINITY
		public RuleCall getINFINITYTerminalRuleCall_1_1() { return cINFINITYTerminalRuleCall_1_1; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTrueKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		/// *
		// * bool : 'true'
		// *      | 'false'
		// *      ;
		// * / Bool:
		//	{Bool} ('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{Bool} ('true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{Bool}
		public Action getBoolAction_0() { return cBoolAction_0; }
		
		//('true' | 'false')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'true'
		public Keyword getTrueKeyword_1_0() { return cTrueKeyword_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.NullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *
		// * nullValue : 'null' ;
		// * / NullValue:
		//	{NullValue} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullValue} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullValue}
		public Action getNullValueAction_0() { return cNullValueAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListContentsListContentsParserRuleCall_2_0 = (RuleCall)cListContentsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * list : '[' (listContents)? ']' ;
		// * / List:
		//	{List} '[' listContents+=ListContents? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '[' listContents+=ListContents? ']'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//listContents+=ListContents?
		public Assignment getListContentsAssignment_2() { return cListContentsAssignment_2; }
		
		//ListContents
		public RuleCall getListContentsListContentsParserRuleCall_2_0() { return cListContentsListContentsParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ListContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.ListContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListContentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListContentsListElementParserRuleCall_0_0 = (RuleCall)cListContentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListContentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListContentsListElementParserRuleCall_1_1_0 = (RuleCall)cListContentsAssignment_1_1.eContents().get(0);
		
		/// *
		// * listContents : listElement (', ' listElement)* ;
		// * / ListContents:
		//	listContents+=ListElement (',' listContents+=ListElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//listContents+=ListElement (',' listContents+=ListElement)*
		public Group getGroup() { return cGroup; }
		
		//listContents+=ListElement
		public Assignment getListContentsAssignment_0() { return cListContentsAssignment_0; }
		
		//ListElement
		public RuleCall getListContentsListElementParserRuleCall_0_0() { return cListContentsListElementParserRuleCall_0_0; }
		
		//(',' listContents+=ListElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//listContents+=ListElement
		public Assignment getListContentsAssignment_1_1() { return cListContentsAssignment_1_1; }
		
		//ListElement
		public RuleCall getListContentsListElementParserRuleCall_1_1_0() { return cListContentsListElementParserRuleCall_1_1_0; }
	}
	public class ListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.ListElement");
		private final RuleCall cValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * listElement : value ;
		// * / ListElement:
		//	Value;
		@Override public ParserRule getRule() { return rule; }
		
		//Value
		public RuleCall getValueParserRuleCall() { return cValueParserRuleCall; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Map");
		private final RuleCall cPropertyMapParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * map : propertyMap ;
		// * / Map:
		//	PropertyMap;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyMap
		public RuleCall getPropertyMapParserRuleCall() { return cPropertyMapParserRuleCall; }
	}
	public class PropertyMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.PropertyMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMapContentsMapContentsParserRuleCall_2_0 = (RuleCall)cMapContentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * propertyMap : '{' (mapContents)? '}' ;
		// * / PropertyMap:
		//	{PropertyMap} '{' mapContents=MapContents? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertyMap} '{' mapContents=MapContents? '}'
		public Group getGroup() { return cGroup; }
		
		//{PropertyMap}
		public Action getPropertyMapAction_0() { return cPropertyMapAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//mapContents=MapContents?
		public Assignment getMapContentsAssignment_2() { return cMapContentsAssignment_2; }
		
		//MapContents
		public RuleCall getMapContentsMapContentsParserRuleCall_2_0() { return cMapContentsMapContentsParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MapContentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.MapContents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyValuePairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyValuePairsKeyValuePairParserRuleCall_0_0 = (RuleCall)cKeyValuePairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyValuePairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyValuePairsKeyValuePairParserRuleCall_1_1_0 = (RuleCall)cKeyValuePairsAssignment_1_1.eContents().get(0);
		
		/// *
		// * mapContents : keyValuePair (', ' keyValuePair)* ;
		// * / MapContents:
		//	keyValuePairs+=KeyValuePair (',' keyValuePairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyValuePairs+=KeyValuePair (',' keyValuePairs+=KeyValuePair)*
		public Group getGroup() { return cGroup; }
		
		//keyValuePairs+=KeyValuePair
		public Assignment getKeyValuePairsAssignment_0() { return cKeyValuePairsAssignment_0; }
		
		//KeyValuePair
		public RuleCall getKeyValuePairsKeyValuePairParserRuleCall_0_0() { return cKeyValuePairsKeyValuePairParserRuleCall_0_0; }
		
		//(',' keyValuePairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyValuePairs+=KeyValuePair
		public Assignment getKeyValuePairsAssignment_1_1() { return cKeyValuePairsAssignment_1_1; }
		
		//KeyValuePair
		public RuleCall getKeyValuePairsKeyValuePairParserRuleCall_1_1_0() { return cKeyValuePairsKeyValuePairParserRuleCall_1_1_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPropertyValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// *
		// * keyValuePair: propertyKey ':' WS? propertyValue ;
		// * / KeyValuePair:
		//	PropertyKey ':' PropertyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//PropertyKey ':' PropertyValue
		public Group getGroup() { return cGroup; }
		
		//PropertyKey
		public RuleCall getPropertyKeyParserRuleCall_0() { return cPropertyKeyParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//PropertyValue
		public RuleCall getPropertyValueParserRuleCall_2() { return cPropertyValueParserRuleCall_2; }
	}
	public class PropertyKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.PropertyKey");
		private final RuleCall cSYMBOLIC_NAMEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * propertyKey : SYMBOLIC_NAME ;
		// * / PropertyKey:
		//	SYMBOLIC_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOLIC_NAME
		public RuleCall getSYMBOLIC_NAMEParserRuleCall() { return cSYMBOLIC_NAMEParserRuleCall; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.PropertyValue");
		private final RuleCall cValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * propertyValue : value ;
		// * / PropertyValue:
		//	Value;
		@Override public ParserRule getRule() { return rule; }
		
		//Value
		public RuleCall getValueParserRuleCall() { return cValueParserRuleCall; }
	}
	public class RelationshipTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.RelationshipType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRelationshipTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *
		// * relationshipType : ':' relationshipTypeName ;
		// * / RelationshipType:
		//	':' RelationshipTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//':' RelationshipTypeName
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//RelationshipTypeName
		public RuleCall getRelationshipTypeNameParserRuleCall_1() { return cRelationshipTypeNameParserRuleCall_1; }
	}
	public class RelationshipTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.RelationshipTypeName");
		private final RuleCall cSYMBOLIC_NAMEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * relationshipTypeName : SYMBOLIC_NAME ;
		// * / RelationshipTypeName:
		//	SYMBOLIC_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOLIC_NAME
		public RuleCall getSYMBOLIC_NAMEParserRuleCall() { return cSYMBOLIC_NAMEParserRuleCall; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *
		// * label : ':' labelName ;
		// * / Label:
		//	':' LabelName;
		@Override public ParserRule getRule() { return rule; }
		
		//':' LabelName
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//LabelName
		public RuleCall getLabelNameParserRuleCall_1() { return cLabelNameParserRuleCall_1; }
	}
	public class LabelNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.LabelName");
		private final RuleCall cSYMBOLIC_NAMEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * labelName : SYMBOLIC_NAME ;
		// * / LabelName:
		//	SYMBOLIC_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//SYMBOLIC_NAME
		public RuleCall getSYMBOLIC_NAMEParserRuleCall() { return cSYMBOLIC_NAMEParserRuleCall; }
	}
	public class EXPONENTPARTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.EXPONENTPART");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// *
		// * FLOAT_LITERAL : '-'? FLOAT_REPR ;
		// *
		// * FLOAT_REPR : DIGIT+ '.' DIGIT+ EXPONENTPART?
		// *            | '.' DIGIT+ EXPONENTPART?
		// *            | DIGIT EXPONENTPART
		// *            | DIGIT+ EXPONENTPART?
		// *            ;
		// * / / *
		// * EXPONENTPART :  ('E' | 'e') ('+' | '-')? DIGIT+ ; // this allows 'E06' as well - this might be intentional
		// * / EXPONENTPART:
		//	('E' | 'e') ('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('E' | 'e') ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'E'
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//'e'
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SYMBOLIC_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.SYMBOLIC_NAME");
		private final RuleCall cIDENTIFIERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////SYMBOLIC_NAME : IDENTIFIER ;
		//SYMBOLIC_NAME:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall() { return cIDENTIFIERTerminalRuleCall; }
	}
	public class MyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.MyString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMyStringAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// The string rule should ideally not include the apostrophes in the parsed value,
		//// but a lexer rule may not match the empty string, so I haven't found a way
		//// to define that quite well yet.
		/// *
		// * string : STRING_LITERAL ;
		// * / MyString:
		//	{MyString} STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{MyString} STRING_LITERAL
		public Group getGroup() { return cGroup; }
		
		//{MyString}
		public Action getMyStringAction_0() { return cMyStringAction_0; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_1() { return cSTRING_LITERALTerminalRuleCall_1; }
	}
	
	
	private final ValueElements pValue;
	private final NodeElements pNode;
	private final NodeDescElements pNodeDesc;
	private final RelationshipElements pRelationship;
	private final RelationshipDescElements pRelationshipDesc;
	private final PathElements pPath;
	private final PathBodyElements pPathBody;
	private final PathLinkElements pPathLink;
	private final ForwardsRelationshipElements pForwardsRelationship;
	private final BackwardsRelationshipElements pBackwardsRelationship;
	private final IntegerElements pInteger;
	private final FloatingPointElements pFloatingPoint;
	private final BoolElements pBool;
	private final NullValueElements pNullValue;
	private final ListElements pList;
	private final ListContentsElements pListContents;
	private final ListElementElements pListElement;
	private final MapElements pMap;
	private final PropertyMapElements pPropertyMap;
	private final MapContentsElements pMapContents;
	private final KeyValuePairElements pKeyValuePair;
	private final PropertyKeyElements pPropertyKey;
	private final PropertyValueElements pPropertyValue;
	private final RelationshipTypeElements pRelationshipType;
	private final RelationshipTypeNameElements pRelationshipTypeName;
	private final LabelElements pLabel;
	private final LabelNameElements pLabelName;
	private final TerminalRule tINTEGER_LITERAL;
	private final TerminalRule tINFINITY;
	private final EXPONENTPARTElements pEXPONENTPART;
	private final SYMBOLIC_NAMEElements pSYMBOLIC_NAME;
	private final TerminalRule tIDENTIFIER;
	private final MyStringElements pMyString;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tSTRING_BODY;
	private final TerminalRule tESCAPED_APOSTROPHE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureResultsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pValue = new ValueElements();
		this.pNode = new NodeElements();
		this.pNodeDesc = new NodeDescElements();
		this.pRelationship = new RelationshipElements();
		this.pRelationshipDesc = new RelationshipDescElements();
		this.pPath = new PathElements();
		this.pPathBody = new PathBodyElements();
		this.pPathLink = new PathLinkElements();
		this.pForwardsRelationship = new ForwardsRelationshipElements();
		this.pBackwardsRelationship = new BackwardsRelationshipElements();
		this.pInteger = new IntegerElements();
		this.pFloatingPoint = new FloatingPointElements();
		this.pBool = new BoolElements();
		this.pNullValue = new NullValueElements();
		this.pList = new ListElements();
		this.pListContents = new ListContentsElements();
		this.pListElement = new ListElementElements();
		this.pMap = new MapElements();
		this.pPropertyMap = new PropertyMapElements();
		this.pMapContents = new MapContentsElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pPropertyKey = new PropertyKeyElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pRelationshipType = new RelationshipTypeElements();
		this.pRelationshipTypeName = new RelationshipTypeNameElements();
		this.pLabel = new LabelElements();
		this.pLabelName = new LabelNameElements();
		this.tINTEGER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.INTEGER_LITERAL");
		this.tINFINITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.INFINITY");
		this.pEXPONENTPART = new EXPONENTPARTElements();
		this.pSYMBOLIC_NAME = new SYMBOLIC_NAMEElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.IDENTIFIER");
		this.pMyString = new MyStringElements();
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.STRING_LITERAL");
		this.tSTRING_BODY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.STRING_BODY");
		this.tESCAPED_APOSTROPHE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ingraph.cucumber.featureresult.FeatureResults.ESCAPED_APOSTROPHE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ingraph.cucumber.featureresult.FeatureResults".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * value : node
	// *  | relationship
	// *  | path
	// *  | integer
	// *  | floatingPoint
	// *  | string
	// *  | bool
	// *  | nullValue
	// *  | list
	// *  | map
	// *  ;
	// * / Value:
	//	Node
	//	| Relationship
	//	| Path
	//	| Integer
	//	| FloatingPoint
	//	| MyString
	//	| Bool
	//	| NullValue
	//	| List
	//	| Map;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	/// *
	// * node : nodeDesc ;
	// * / Node:
	//	NodeDesc;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	/// *
	// * nodeDesc : '(' (label)* WS? (propertyMap)? ')' ;
	// * / NodeDesc:
	//	{NodeDesc} '(' labels+=Label* propertyMap=PropertyMap? ')';
	public NodeDescElements getNodeDescAccess() {
		return pNodeDesc;
	}
	
	public ParserRule getNodeDescRule() {
		return getNodeDescAccess().getRule();
	}
	
	/// *
	// * relationship : relationshipDesc ;
	// * / Relationship:
	//	RelationshipDesc;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	/// *
	// * relationshipDesc : '[' relationshipType (WS propertyMap)* ']' ;
	// * / RelationshipDesc:
	//	{RelationshipDesc} '[' type=RelationshipType propertyMap=PropertyMap? ']';
	public RelationshipDescElements getRelationshipDescAccess() {
		return pRelationshipDesc;
	}
	
	public ParserRule getRelationshipDescRule() {
		return getRelationshipDescAccess().getRule();
	}
	
	/// *
	// * path : '<' pathBody '>' ;
	// * / Path:
	//	'<' PathBody '>';
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	/// *
	// * pathBody : nodeDesc (pathLink)* ;
	// * / PathBody:
	//	node=NodeDesc pathLinks+=PathLink*;
	public PathBodyElements getPathBodyAccess() {
		return pPathBody;
	}
	
	public ParserRule getPathBodyRule() {
		return getPathBodyAccess().getRule();
	}
	
	/// *
	// * pathLink : (forwardsRelationship | backwardsRelationship) nodeDesc ;
	// * / PathLink:
	//	{PathLink} relationship=(ForwardsRelationship | BackwardsRelationship) node=NodeDesc;
	public PathLinkElements getPathLinkAccess() {
		return pPathLink;
	}
	
	public ParserRule getPathLinkRule() {
		return getPathLinkAccess().getRule();
	}
	
	/// *
	// * forwardsRelationship : '-' relationshipDesc '->' ;
	// * / ForwardsRelationship:
	//	'-' RelationshipDesc '->';
	public ForwardsRelationshipElements getForwardsRelationshipAccess() {
		return pForwardsRelationship;
	}
	
	public ParserRule getForwardsRelationshipRule() {
		return getForwardsRelationshipAccess().getRule();
	}
	
	/// *
	// * backwardsRelationship : '<-' relationshipDesc '-' ;
	// * / BackwardsRelationship:
	//	'<-' RelationshipDesc '-';
	public BackwardsRelationshipElements getBackwardsRelationshipAccess() {
		return pBackwardsRelationship;
	}
	
	public ParserRule getBackwardsRelationshipRule() {
		return getBackwardsRelationshipAccess().getRule();
	}
	
	/// *
	// * integer : INTEGER_LITERAL ;
	// * / Integer:
	//	{Integer} INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//FloatingPoint:
	//	{FloatingPoint} (INT // TODO
	//	| INFINITY);
	public FloatingPointElements getFloatingPointAccess() {
		return pFloatingPoint;
	}
	
	public ParserRule getFloatingPointRule() {
		return getFloatingPointAccess().getRule();
	}
	
	/// *
	// * bool : 'true'
	// *      | 'false'
	// *      ;
	// * / Bool:
	//	{Bool} ('true' | 'false');
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	/// *
	// * nullValue : 'null' ;
	// * / NullValue:
	//	{NullValue} 'null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	/// *
	// * list : '[' (listContents)? ']' ;
	// * / List:
	//	{List} '[' listContents+=ListContents? ']';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	/// *
	// * listContents : listElement (', ' listElement)* ;
	// * / ListContents:
	//	listContents+=ListElement (',' listContents+=ListElement)*;
	public ListContentsElements getListContentsAccess() {
		return pListContents;
	}
	
	public ParserRule getListContentsRule() {
		return getListContentsAccess().getRule();
	}
	
	/// *
	// * listElement : value ;
	// * / ListElement:
	//	Value;
	public ListElementElements getListElementAccess() {
		return pListElement;
	}
	
	public ParserRule getListElementRule() {
		return getListElementAccess().getRule();
	}
	
	/// *
	// * map : propertyMap ;
	// * / Map:
	//	PropertyMap;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	/// *
	// * propertyMap : '{' (mapContents)? '}' ;
	// * / PropertyMap:
	//	{PropertyMap} '{' mapContents=MapContents? '}';
	public PropertyMapElements getPropertyMapAccess() {
		return pPropertyMap;
	}
	
	public ParserRule getPropertyMapRule() {
		return getPropertyMapAccess().getRule();
	}
	
	/// *
	// * mapContents : keyValuePair (', ' keyValuePair)* ;
	// * / MapContents:
	//	keyValuePairs+=KeyValuePair (',' keyValuePairs+=KeyValuePair)*;
	public MapContentsElements getMapContentsAccess() {
		return pMapContents;
	}
	
	public ParserRule getMapContentsRule() {
		return getMapContentsAccess().getRule();
	}
	
	/// *
	// * keyValuePair: propertyKey ':' WS? propertyValue ;
	// * / KeyValuePair:
	//	PropertyKey ':' PropertyValue;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	/// *
	// * propertyKey : SYMBOLIC_NAME ;
	// * / PropertyKey:
	//	SYMBOLIC_NAME;
	public PropertyKeyElements getPropertyKeyAccess() {
		return pPropertyKey;
	}
	
	public ParserRule getPropertyKeyRule() {
		return getPropertyKeyAccess().getRule();
	}
	
	/// *
	// * propertyValue : value ;
	// * / PropertyValue:
	//	Value;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	/// *
	// * relationshipType : ':' relationshipTypeName ;
	// * / RelationshipType:
	//	':' RelationshipTypeName;
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return pRelationshipType;
	}
	
	public ParserRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}
	
	/// *
	// * relationshipTypeName : SYMBOLIC_NAME ;
	// * / RelationshipTypeName:
	//	SYMBOLIC_NAME;
	public RelationshipTypeNameElements getRelationshipTypeNameAccess() {
		return pRelationshipTypeName;
	}
	
	public ParserRule getRelationshipTypeNameRule() {
		return getRelationshipTypeNameAccess().getRule();
	}
	
	/// *
	// * label : ':' labelName ;
	// * / Label:
	//	':' LabelName;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	/// *
	// * labelName : SYMBOLIC_NAME ;
	// * / LabelName:
	//	SYMBOLIC_NAME;
	public LabelNameElements getLabelNameAccess() {
		return pLabelName;
	}
	
	public ParserRule getLabelNameRule() {
		return getLabelNameAccess().getRule();
	}
	
	//terminal INTEGER_LITERAL:
	//	INT;
	public TerminalRule getINTEGER_LITERALRule() {
		return tINTEGER_LITERAL;
	}
	
	//terminal INFINITY:
	//	'-'? 'Inf';
	public TerminalRule getINFINITYRule() {
		return tINFINITY;
	}
	
	/// *
	// * FLOAT_LITERAL : '-'? FLOAT_REPR ;
	// *
	// * FLOAT_REPR : DIGIT+ '.' DIGIT+ EXPONENTPART?
	// *            | '.' DIGIT+ EXPONENTPART?
	// *            | DIGIT EXPONENTPART
	// *            | DIGIT+ EXPONENTPART?
	// *            ;
	// * / / *
	// * EXPONENTPART :  ('E' | 'e') ('+' | '-')? DIGIT+ ; // this allows 'E06' as well - this might be intentional
	// * / EXPONENTPART:
	//	('E' | 'e') ('+' | '-')? INT;
	public EXPONENTPARTElements getEXPONENTPARTAccess() {
		return pEXPONENTPART;
	}
	
	public ParserRule getEXPONENTPARTRule() {
		return getEXPONENTPARTAccess().getRule();
	}
	
	////SYMBOLIC_NAME : IDENTIFIER ;
	//SYMBOLIC_NAME:
	//	IDENTIFIER;
	public SYMBOLIC_NAMEElements getSYMBOLIC_NAMEAccess() {
		return pSYMBOLIC_NAME;
	}
	
	public ParserRule getSYMBOLIC_NAMERule() {
		return getSYMBOLIC_NAMEAccess().getRule();
	}
	
	//terminal IDENTIFIER:
	//	ID;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//// The string rule should ideally not include the apostrophes in the parsed value,
	//// but a lexer rule may not match the empty string, so I haven't found a way
	//// to define that quite well yet.
	/// *
	// * string : STRING_LITERAL ;
	// * / MyString:
	//	{MyString} STRING_LITERAL;
	public MyStringElements getMyStringAccess() {
		return pMyString;
	}
	
	public ParserRule getMyStringRule() {
		return getMyStringAccess().getRule();
	}
	
	//terminal STRING_LITERAL:
	//	'\'' STRING_BODY* '\'';
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal STRING_BODY:
	//	'\\u0000'..'\\u0026' // \\u0027 is the string delimiter character (')
	//	| '\\u0028'..'\\u01FF'
	//	| ESCAPED_APOSTROPHE;
	public TerminalRule getSTRING_BODYRule() {
		return tSTRING_BODY;
	}
	
	//terminal ESCAPED_APOSTROPHE:
	//	'\\\'';
	public TerminalRule getESCAPED_APOSTROPHERule() {
		return tESCAPED_APOSTROPHE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
