/*
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.serializer;

import com.google.inject.Inject;
import ingraph.cucumber.featureresult.services.FeatureResultsGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class FeatureResultsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FeatureResultsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Bool_FalseKeyword_1_1_or_TrueKeyword_1_0;
	protected AbstractElementAlias match_FloatingPoint_INFINITYTerminalRuleCall_1_1_or_INTTerminalRuleCall_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FeatureResultsGrammarAccess) access;
		match_Bool_FalseKeyword_1_1_or_TrueKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBoolAccess().getFalseKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getBoolAccess().getTrueKeyword_1_0()));
		match_FloatingPoint_INFINITYTerminalRuleCall_1_1_or_INTTerminalRuleCall_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFloatingPointAccess().getINFINITYTerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getFloatingPointAccess().getINTTerminalRuleCall_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINFINITYRule())
			return getINFINITYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPropertyKeyRule())
			return getPropertyKeyToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRING_LITERALRule())
			return getSTRING_LITERALToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INFINITY : '-'? 'Inf';
	 */
	protected String getINFINITYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Inf";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * PropertyKey :
	 * 	SYMBOLIC_NAME
	 * ;
	 */
	protected String getPropertyKeyToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING_LITERAL:
	 * 	'\'' STRING_BODY* '\'';
	 */
	protected String getSTRING_LITERALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\'\'";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Bool_FalseKeyword_1_1_or_TrueKeyword_1_0.equals(syntax))
				emit_Bool_FalseKeyword_1_1_or_TrueKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FloatingPoint_INFINITYTerminalRuleCall_1_1_or_INTTerminalRuleCall_1_0.equals(syntax))
				emit_FloatingPoint_INFINITYTerminalRuleCall_1_1_or_INTTerminalRuleCall_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'true' | 'false'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) PropertyKey ':' (ambiguity) (rule start)
	 */
	protected void emit_Bool_FalseKeyword_1_1_or_TrueKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INT | INFINITY
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) PropertyKey ':' (ambiguity) (rule start)
	 */
	protected void emit_FloatingPoint_INFINITYTerminalRuleCall_1_1_or_INTTerminalRuleCall_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
