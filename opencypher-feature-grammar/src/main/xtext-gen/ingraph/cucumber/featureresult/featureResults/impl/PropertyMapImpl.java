/**
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.featureResults.impl;

import ingraph.cucumber.featureresult.featureResults.FeatureResultsPackage;
import ingraph.cucumber.featureresult.featureResults.MapContents;
import ingraph.cucumber.featureresult.featureResults.PropertyMap;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Map</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ingraph.cucumber.featureresult.featureResults.impl.PropertyMapImpl#getMapContents <em>Map Contents</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyMapImpl extends MapImpl implements PropertyMap
{
  /**
   * The cached value of the '{@link #getMapContents() <em>Map Contents</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMapContents()
   * @generated
   * @ordered
   */
  protected MapContents mapContents;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyMapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FeatureResultsPackage.Literals.PROPERTY_MAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapContents getMapContents()
  {
    return mapContents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMapContents(MapContents newMapContents, NotificationChain msgs)
  {
    MapContents oldMapContents = mapContents;
    mapContents = newMapContents;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS, oldMapContents, newMapContents);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMapContents(MapContents newMapContents)
  {
    if (newMapContents != mapContents)
    {
      NotificationChain msgs = null;
      if (mapContents != null)
        msgs = ((InternalEObject)mapContents).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS, null, msgs);
      if (newMapContents != null)
        msgs = ((InternalEObject)newMapContents).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS, null, msgs);
      msgs = basicSetMapContents(newMapContents, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS, newMapContents, newMapContents));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS:
        return basicSetMapContents(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS:
        return getMapContents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS:
        setMapContents((MapContents)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS:
        setMapContents((MapContents)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.PROPERTY_MAP__MAP_CONTENTS:
        return mapContents != null;
    }
    return super.eIsSet(featureID);
  }

} //PropertyMapImpl
