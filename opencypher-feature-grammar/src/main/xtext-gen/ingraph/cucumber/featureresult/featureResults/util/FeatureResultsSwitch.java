/**
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.featureResults.util;

import ingraph.cucumber.featureresult.featureResults.BackwardsRelationship;
import ingraph.cucumber.featureresult.featureResults.Bool;
import ingraph.cucumber.featureresult.featureResults.DirectedRelationship;
import ingraph.cucumber.featureresult.featureResults.FeatureResultsPackage;
import ingraph.cucumber.featureresult.featureResults.FeatureValue;
import ingraph.cucumber.featureresult.featureResults.ForwardsRelationship;
import ingraph.cucumber.featureresult.featureResults.KeyValuePair;
import ingraph.cucumber.featureresult.featureResults.List;
import ingraph.cucumber.featureresult.featureResults.ListContents;
import ingraph.cucumber.featureresult.featureResults.ListElement;
import ingraph.cucumber.featureresult.featureResults.Map;
import ingraph.cucumber.featureresult.featureResults.MapContents;
import ingraph.cucumber.featureresult.featureResults.MyString;
import ingraph.cucumber.featureresult.featureResults.Node;
import ingraph.cucumber.featureresult.featureResults.NodeDesc;
import ingraph.cucumber.featureresult.featureResults.NullValue;
import ingraph.cucumber.featureresult.featureResults.Path;
import ingraph.cucumber.featureresult.featureResults.PathBody;
import ingraph.cucumber.featureresult.featureResults.PathLink;
import ingraph.cucumber.featureresult.featureResults.PropertyMap;
import ingraph.cucumber.featureresult.featureResults.PropertyValue;
import ingraph.cucumber.featureresult.featureResults.Relationship;
import ingraph.cucumber.featureresult.featureResults.RelationshipDesc;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see ingraph.cucumber.featureresult.featureResults.FeatureResultsPackage
 * @generated
 */
public class FeatureResultsSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FeatureResultsPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureResultsSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = FeatureResultsPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case FeatureResultsPackage.FEATURE_VALUE:
      {
        FeatureValue featureValue = (FeatureValue)theEObject;
        T result = caseFeatureValue(featureValue);
        if (result == null) result = caseListElement(featureValue);
        if (result == null) result = casePropertyValue(featureValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.NODE:
      {
        Node node = (Node)theEObject;
        T result = caseNode(node);
        if (result == null) result = caseFeatureValue(node);
        if (result == null) result = caseListElement(node);
        if (result == null) result = casePropertyValue(node);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.NODE_DESC:
      {
        NodeDesc nodeDesc = (NodeDesc)theEObject;
        T result = caseNodeDesc(nodeDesc);
        if (result == null) result = caseNode(nodeDesc);
        if (result == null) result = caseFeatureValue(nodeDesc);
        if (result == null) result = caseListElement(nodeDesc);
        if (result == null) result = casePropertyValue(nodeDesc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.RELATIONSHIP:
      {
        Relationship relationship = (Relationship)theEObject;
        T result = caseRelationship(relationship);
        if (result == null) result = caseFeatureValue(relationship);
        if (result == null) result = caseListElement(relationship);
        if (result == null) result = casePropertyValue(relationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.RELATIONSHIP_DESC:
      {
        RelationshipDesc relationshipDesc = (RelationshipDesc)theEObject;
        T result = caseRelationshipDesc(relationshipDesc);
        if (result == null) result = caseRelationship(relationshipDesc);
        if (result == null) result = caseFeatureValue(relationshipDesc);
        if (result == null) result = caseListElement(relationshipDesc);
        if (result == null) result = casePropertyValue(relationshipDesc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.PATH:
      {
        Path path = (Path)theEObject;
        T result = casePath(path);
        if (result == null) result = caseFeatureValue(path);
        if (result == null) result = caseListElement(path);
        if (result == null) result = casePropertyValue(path);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.PATH_BODY:
      {
        PathBody pathBody = (PathBody)theEObject;
        T result = casePathBody(pathBody);
        if (result == null) result = casePath(pathBody);
        if (result == null) result = caseFeatureValue(pathBody);
        if (result == null) result = caseListElement(pathBody);
        if (result == null) result = casePropertyValue(pathBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.PATH_LINK:
      {
        PathLink pathLink = (PathLink)theEObject;
        T result = casePathLink(pathLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.DIRECTED_RELATIONSHIP:
      {
        DirectedRelationship directedRelationship = (DirectedRelationship)theEObject;
        T result = caseDirectedRelationship(directedRelationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.FORWARDS_RELATIONSHIP:
      {
        ForwardsRelationship forwardsRelationship = (ForwardsRelationship)theEObject;
        T result = caseForwardsRelationship(forwardsRelationship);
        if (result == null) result = caseDirectedRelationship(forwardsRelationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP:
      {
        BackwardsRelationship backwardsRelationship = (BackwardsRelationship)theEObject;
        T result = caseBackwardsRelationship(backwardsRelationship);
        if (result == null) result = caseDirectedRelationship(backwardsRelationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.BOOL:
      {
        Bool bool = (Bool)theEObject;
        T result = caseBool(bool);
        if (result == null) result = caseFeatureValue(bool);
        if (result == null) result = caseListElement(bool);
        if (result == null) result = casePropertyValue(bool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.NULL_VALUE:
      {
        NullValue nullValue = (NullValue)theEObject;
        T result = caseNullValue(nullValue);
        if (result == null) result = caseFeatureValue(nullValue);
        if (result == null) result = caseListElement(nullValue);
        if (result == null) result = casePropertyValue(nullValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = caseFeatureValue(list);
        if (result == null) result = caseListElement(list);
        if (result == null) result = casePropertyValue(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.LIST_CONTENTS:
      {
        ListContents listContents = (ListContents)theEObject;
        T result = caseListContents(listContents);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.LIST_ELEMENT:
      {
        ListElement listElement = (ListElement)theEObject;
        T result = caseListElement(listElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.MAP:
      {
        Map map = (Map)theEObject;
        T result = caseMap(map);
        if (result == null) result = caseFeatureValue(map);
        if (result == null) result = caseListElement(map);
        if (result == null) result = casePropertyValue(map);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.PROPERTY_MAP:
      {
        PropertyMap propertyMap = (PropertyMap)theEObject;
        T result = casePropertyMap(propertyMap);
        if (result == null) result = caseMap(propertyMap);
        if (result == null) result = caseFeatureValue(propertyMap);
        if (result == null) result = caseListElement(propertyMap);
        if (result == null) result = casePropertyValue(propertyMap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.MAP_CONTENTS:
      {
        MapContents mapContents = (MapContents)theEObject;
        T result = caseMapContents(mapContents);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.KEY_VALUE_PAIR:
      {
        KeyValuePair keyValuePair = (KeyValuePair)theEObject;
        T result = caseKeyValuePair(keyValuePair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.PROPERTY_VALUE:
      {
        PropertyValue propertyValue = (PropertyValue)theEObject;
        T result = casePropertyValue(propertyValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.INTEGER:
      {
        ingraph.cucumber.featureresult.featureResults.Integer integer = (ingraph.cucumber.featureresult.featureResults.Integer)theEObject;
        T result = caseInteger(integer);
        if (result == null) result = caseFeatureValue(integer);
        if (result == null) result = caseListElement(integer);
        if (result == null) result = casePropertyValue(integer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FeatureResultsPackage.MY_STRING:
      {
        MyString myString = (MyString)theEObject;
        T result = caseMyString(myString);
        if (result == null) result = caseFeatureValue(myString);
        if (result == null) result = caseListElement(myString);
        if (result == null) result = casePropertyValue(myString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatureValue(FeatureValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNode(Node object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Desc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Desc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeDesc(NodeDesc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationship(Relationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Desc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Desc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipDesc(RelationshipDesc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePath(Path object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathBody(PathBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Path Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Path Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePathLink(PathLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directed Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directed Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectedRelationship(DirectedRelationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forwards Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forwards Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForwardsRelationship(ForwardsRelationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Backwards Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Backwards Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBackwardsRelationship(BackwardsRelationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBool(Bool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullValue(NullValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Contents</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Contents</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListContents(ListContents object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListElement(ListElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMap(Map object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyMap(PropertyMap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Contents</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Contents</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapContents(MapContents object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Value Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Value Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyValuePair(KeyValuePair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyValue(PropertyValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInteger(ingraph.cucumber.featureresult.featureResults.Integer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>My String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>My String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMyString(MyString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //FeatureResultsSwitch
