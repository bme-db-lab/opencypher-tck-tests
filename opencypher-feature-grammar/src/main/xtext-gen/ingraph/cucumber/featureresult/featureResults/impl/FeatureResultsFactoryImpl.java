/**
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.featureResults.impl;

import ingraph.cucumber.featureresult.featureResults.BackwardsRelationship;
import ingraph.cucumber.featureresult.featureResults.Bool;
import ingraph.cucumber.featureresult.featureResults.DirectedRelationship;
import ingraph.cucumber.featureresult.featureResults.FeatureResultsFactory;
import ingraph.cucumber.featureresult.featureResults.FeatureResultsPackage;
import ingraph.cucumber.featureresult.featureResults.FeatureValue;
import ingraph.cucumber.featureresult.featureResults.FloatingPoint;
import ingraph.cucumber.featureresult.featureResults.ForwardsRelationship;
import ingraph.cucumber.featureresult.featureResults.KeyValuePair;
import ingraph.cucumber.featureresult.featureResults.Label;
import ingraph.cucumber.featureresult.featureResults.List;
import ingraph.cucumber.featureresult.featureResults.ListContents;
import ingraph.cucumber.featureresult.featureResults.ListElement;
import ingraph.cucumber.featureresult.featureResults.Map;
import ingraph.cucumber.featureresult.featureResults.MapContents;
import ingraph.cucumber.featureresult.featureResults.MyString;
import ingraph.cucumber.featureresult.featureResults.Node;
import ingraph.cucumber.featureresult.featureResults.NodeDesc;
import ingraph.cucumber.featureresult.featureResults.NullValue;
import ingraph.cucumber.featureresult.featureResults.Path;
import ingraph.cucumber.featureresult.featureResults.PathBody;
import ingraph.cucumber.featureresult.featureResults.PathLink;
import ingraph.cucumber.featureresult.featureResults.PropertyMap;
import ingraph.cucumber.featureresult.featureResults.PropertyValue;
import ingraph.cucumber.featureresult.featureResults.Relationship;
import ingraph.cucumber.featureresult.featureResults.RelationshipDesc;
import ingraph.cucumber.featureresult.featureResults.RelationshipType;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FeatureResultsFactoryImpl extends EFactoryImpl implements FeatureResultsFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FeatureResultsFactory init()
  {
    try
    {
      FeatureResultsFactory theFeatureResultsFactory = (FeatureResultsFactory)EPackage.Registry.INSTANCE.getEFactory(FeatureResultsPackage.eNS_URI);
      if (theFeatureResultsFactory != null)
      {
        return theFeatureResultsFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FeatureResultsFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureResultsFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FeatureResultsPackage.FEATURE_VALUE: return createFeatureValue();
      case FeatureResultsPackage.NODE: return createNode();
      case FeatureResultsPackage.NODE_DESC: return createNodeDesc();
      case FeatureResultsPackage.RELATIONSHIP: return createRelationship();
      case FeatureResultsPackage.RELATIONSHIP_DESC: return createRelationshipDesc();
      case FeatureResultsPackage.PATH: return createPath();
      case FeatureResultsPackage.PATH_BODY: return createPathBody();
      case FeatureResultsPackage.PATH_LINK: return createPathLink();
      case FeatureResultsPackage.DIRECTED_RELATIONSHIP: return createDirectedRelationship();
      case FeatureResultsPackage.FORWARDS_RELATIONSHIP: return createForwardsRelationship();
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP: return createBackwardsRelationship();
      case FeatureResultsPackage.FLOATING_POINT: return createFloatingPoint();
      case FeatureResultsPackage.BOOL: return createBool();
      case FeatureResultsPackage.NULL_VALUE: return createNullValue();
      case FeatureResultsPackage.LIST: return createList();
      case FeatureResultsPackage.LIST_CONTENTS: return createListContents();
      case FeatureResultsPackage.LIST_ELEMENT: return createListElement();
      case FeatureResultsPackage.MAP: return createMap();
      case FeatureResultsPackage.PROPERTY_MAP: return createPropertyMap();
      case FeatureResultsPackage.MAP_CONTENTS: return createMapContents();
      case FeatureResultsPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case FeatureResultsPackage.PROPERTY_VALUE: return createPropertyValue();
      case FeatureResultsPackage.RELATIONSHIP_TYPE: return createRelationshipType();
      case FeatureResultsPackage.LABEL: return createLabel();
      case FeatureResultsPackage.INTEGER: return createInteger();
      case FeatureResultsPackage.MY_STRING: return createMyString();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureValue createFeatureValue()
  {
    FeatureValueImpl featureValue = new FeatureValueImpl();
    return featureValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeDesc createNodeDesc()
  {
    NodeDescImpl nodeDesc = new NodeDescImpl();
    return nodeDesc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relationship createRelationship()
  {
    RelationshipImpl relationship = new RelationshipImpl();
    return relationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationshipDesc createRelationshipDesc()
  {
    RelationshipDescImpl relationshipDesc = new RelationshipDescImpl();
    return relationshipDesc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathBody createPathBody()
  {
    PathBodyImpl pathBody = new PathBodyImpl();
    return pathBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PathLink createPathLink()
  {
    PathLinkImpl pathLink = new PathLinkImpl();
    return pathLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DirectedRelationship createDirectedRelationship()
  {
    DirectedRelationshipImpl directedRelationship = new DirectedRelationshipImpl();
    return directedRelationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForwardsRelationship createForwardsRelationship()
  {
    ForwardsRelationshipImpl forwardsRelationship = new ForwardsRelationshipImpl();
    return forwardsRelationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BackwardsRelationship createBackwardsRelationship()
  {
    BackwardsRelationshipImpl backwardsRelationship = new BackwardsRelationshipImpl();
    return backwardsRelationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatingPoint createFloatingPoint()
  {
    FloatingPointImpl floatingPoint = new FloatingPointImpl();
    return floatingPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bool createBool()
  {
    BoolImpl bool = new BoolImpl();
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NullValue createNullValue()
  {
    NullValueImpl nullValue = new NullValueImpl();
    return nullValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListContents createListContents()
  {
    ListContentsImpl listContents = new ListContentsImpl();
    return listContents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListElement createListElement()
  {
    ListElementImpl listElement = new ListElementImpl();
    return listElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyMap createPropertyMap()
  {
    PropertyMapImpl propertyMap = new PropertyMapImpl();
    return propertyMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapContents createMapContents()
  {
    MapContentsImpl mapContents = new MapContentsImpl();
    return mapContents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PropertyValue createPropertyValue()
  {
    PropertyValueImpl propertyValue = new PropertyValueImpl();
    return propertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationshipType createRelationshipType()
  {
    RelationshipTypeImpl relationshipType = new RelationshipTypeImpl();
    return relationshipType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ingraph.cucumber.featureresult.featureResults.Integer createInteger()
  {
    IntegerImpl integer = new IntegerImpl();
    return integer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyString createMyString()
  {
    MyStringImpl myString = new MyStringImpl();
    return myString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureResultsPackage getFeatureResultsPackage()
  {
    return (FeatureResultsPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FeatureResultsPackage getPackage()
  {
    return FeatureResultsPackage.eINSTANCE;
  }

} //FeatureResultsFactoryImpl
