/**
 * generated by Xtext 2.10.0
 */
package ingraph.cucumber.featureresult.featureResults.impl;

import ingraph.cucumber.featureresult.featureResults.BackwardsRelationship;
import ingraph.cucumber.featureresult.featureResults.FeatureResultsPackage;
import ingraph.cucumber.featureresult.featureResults.RelationshipDesc;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Backwards Relationship</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ingraph.cucumber.featureresult.featureResults.impl.BackwardsRelationshipImpl#getRelationshipDesc <em>Relationship Desc</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BackwardsRelationshipImpl extends MinimalEObjectImpl.Container implements BackwardsRelationship
{
  /**
   * The cached value of the '{@link #getRelationshipDesc() <em>Relationship Desc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationshipDesc()
   * @generated
   * @ordered
   */
  protected RelationshipDesc relationshipDesc;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BackwardsRelationshipImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FeatureResultsPackage.Literals.BACKWARDS_RELATIONSHIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationshipDesc getRelationshipDesc()
  {
    return relationshipDesc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationshipDesc(RelationshipDesc newRelationshipDesc, NotificationChain msgs)
  {
    RelationshipDesc oldRelationshipDesc = relationshipDesc;
    relationshipDesc = newRelationshipDesc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC, oldRelationshipDesc, newRelationshipDesc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelationshipDesc(RelationshipDesc newRelationshipDesc)
  {
    if (newRelationshipDesc != relationshipDesc)
    {
      NotificationChain msgs = null;
      if (relationshipDesc != null)
        msgs = ((InternalEObject)relationshipDesc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC, null, msgs);
      if (newRelationshipDesc != null)
        msgs = ((InternalEObject)newRelationshipDesc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC, null, msgs);
      msgs = basicSetRelationshipDesc(newRelationshipDesc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC, newRelationshipDesc, newRelationshipDesc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC:
        return basicSetRelationshipDesc(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC:
        return getRelationshipDesc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC:
        setRelationshipDesc((RelationshipDesc)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC:
        setRelationshipDesc((RelationshipDesc)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FeatureResultsPackage.BACKWARDS_RELATIONSHIP__RELATIONSHIP_DESC:
        return relationshipDesc != null;
    }
    return super.eIsSet(featureID);
  }

} //BackwardsRelationshipImpl
